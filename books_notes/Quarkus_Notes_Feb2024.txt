0. Clear the local Maven reporitory cache by deleting contents of: C:\Users\rkool\.m2\repository
AND  C:\Users\rkool\.m2\wrapper.

1. Installed GraalVM latest version (OpenJDK 20 works as well) at D:\apps\GraalVM\graalvm-jdk-20.0.2.9.1 
Set JAVA_HOME, and PATH variables to point to the install directoty and its bin folder.
Set GRAALVM_HOME=D:\apps\GraalVM\graalvm-jdk-20.0.2.9.1

2. Downloaded latest Maven dist, unzipped to D:\apps\apache\maven\apache-maven-3.9.4
Added D:\apps\apache\maven\apache-maven-3.9.4\bin to the PATH.
Set MVN_HOME to D:\apps\apache\maven\apache-maven-3.9.4

3. Created a workspace directoty at D:\QuarkusSpace\second
cd D:\QuarkusSpace\second

4. Run the following command to Scaffold a starter App:

mvn io.quarkus:quarkus-maven-plugin:3.3.1:create -DprojectGroupId=org.kool -DprojectArtifactId=second-app -DclassName="org.kool.second.SecondResource" -Dpath="/second"

Note: Check for the latest version of the plugin io.quarkus:quarkus-maven-plugin:3.3.1 at the maven reporitory at: https://mvnrepository.com/artifact/io.quarkus/quarkus-maven-plugin   and update the above command in the future as necessary.


5. cd D:\QuarkusSpace\second\second-app
Run the command:  mvnw quarkus:dev

6. Goto http://localhost:8080/second
to see the output.

7. Open VS Code, and open folder D:\QuarkusSpace\second\second-app to navigate and edit code.

8. Docker is required for container image building, and K8S deployments. 
	Docker and Docker Hub login:
	Google login using: psionic.mutant@gmail.com
	Docker username:  psionicmutant
	
9.Git & GitHub configs: 
	Git Ref: https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup

	The Github URL for this repository is: https://github.com/jeevkool/Quarkus_Vertx.git
	Add global git username and password for GitHub authentication, as follows at the Git command prompt:

		git config --global user.name "jeevkool"
		git config --global user.email jeevkool@hotmail.com
		git config --global user.password Key2free!

	Verify by listing the Git configs:

		$ git config --list


***=================================================================***
****=============== BUILDING Native Image =========================****

===> Note: Make sure to open CMD "x64 Native Tools Command Prompt for VS 2022"  and NOT: "x64_x86 Cross Tools Command Prompt for VS 2022"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ref: Steps here: https://access.redhat.com/documentation/en-us/red_hat_build_of_quarkus/quarkus-2-7/guide/f93c45bd-4feb-4f74-a70a-022e9fb41957#_7293eccb-e8ef-47f9-b8b3-b185e5af504b

AND here: https://quarkus.io/guides/building-native-image

Note: On Windows make sure the "C Development Environment" Visual Studio 2017 Visual C++ Build Tools is installed from here: https://aka.ms/vs/15/release/vs_buildtools.exe

1.Install Visual Studio 2022 Build Tools.
2. Make sure GRAALVM_HOME is set properly and JAVA_HOME is pointing to  GRAALVM_HOME
3. Open x64 Native Tools Command Prompt for VS 2022 ==> Not the usual CMD prompt.
4. CD to the app directory. cd D:\QuarkusSpace\second\second-app
5. Run command:  mvnw install -Dnative    
This builds the native image in the D:\QuarkusSpace\second\second-app\target directory.
Note: This takes several minutes to builf the exe. Exe File built is: "second-app-1.0.0-SNAPSHOT-runner.exe"
You can copy this file to any directory, and run on its own.



***========RECIPE: USING VERT.X Reactive API FROM QUARKUS APPLICATION=======================***

Note: Complete example App code demonstrates use of Streaming, Events/EventBus, and Non-blocking Vertx Web Client that sends a GET request to the Wikipedia API.

Ref: USING ECLIPSE VERT.X Reactive API FROM A QUARKUS APPLICATION : https://quarkus.io/guides/vertx#:~:text=import%20jakarta.ws.rs.Path%3B%20%40Path%28%22%2Fvertx%22%29%20%281%29public%20class%20VertxResource%20%7B%20private,VertxResource%28Vertx%20vertx%29%20%7B%20%283%29this.vertx%20%3D%20vertx%3B%20%284%29%7D%20%7D


Vertx Building Verticles for EventBus: https://quarkus.io/guides/vertx-reference

*****=======================================================================================****
====>> USING THE EVENT BUS  << ====================
Ref: https://quarkus.io/guides/reactive-event-bus



=======================================================================================================
Microk8s: 22-Oct-2023: Deployed and tested successfully With Microk8s Kubernetes container on Ubuntu
=======================================================================================================

Note: To check Ubuntu version run the following commands:
$ lsb_release -a

Step 0: Install GraalVM/JDK and BuildEssentials/GCC etc on Ubuntu:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install JDK on Ubuntu:
Download tar.gz from https://download.oracle.com/graalvm/21/latest/graalvm-jdk-21_linux-x64_bin.tar.gz
Ref: https://stackoverflow.com/questions/14931932/whats-the-correct-way-of-installing-jdk-on-linux

$ wget https://download.oracle.com/graalvm/21/latest/graalvm-jdk-21_linux-x64_bin.tar.gz

Copy the tar.gz to /usr/lib/jvm/
$ sudo mkdir /usr/lib/jvm  ==> if necessary
$ sudo cp ~/Downloads/graalvm-jdk-21_linux-x64_bin.tar.gz /usr/lib/jvm

Extract jar.gz:
$ cd /usr/lib/jvm/
$ sudo tar -xzf ./graalvm-jdk-21_linux-x64_bin.tar.gz
$ sudo chmod -R a+rx ./graalvm-jdk-21.0.2+13.1

Set environment variables ==> Needs Ubuntu restart to take effect.
$  sudo nano /etc/environment
Add "/usr/lib/jvm/graalvm-jdk-21.0.2+13.1/bin" to PATH
Define JAVA_HOME="/usr/lib/jvm/graalvm-jdk-21.0.2+13.1"

$ source /etc/environment   ==> to take effect immediately without restarting.
NOTE: This is not taking effect after logout/login.

Update /etc/profile with the following towards the end of the file:

$ sudo nano /etc/profile

export JAVA_HOME="/usr/lib/jvm/graalvm-jdk-21.0.2+13.1"
export GRAALVM_HOME="/usr/lib/jvm/graalvm-jdk-21.0.2+13.1"
export PATH=$JAVA_HOME/bin:$PATH

OR for JDK 17:

export JAVA_HOME="/usr/lib/jvm/graalvm-jdk-17.0.10+11.1"
export GRAALVM_HOME="/usr/lib/jvm/graalvm-jdk-17.0.10+11.1"
export PATH=$JAVA_HOME/bin:$PATH

$ sudo source /etc/profile

Error when running  $ ./mvnw clean package -Pnative   to build native image:
 "Error: Default native-compiler executable 'gcc' not found via environment variable PATH"

FIX on Ubuntu:  run $ sudo apt-get install build-essential

Error again: 
 " libz:.a is missing. Please install it"  AND
 "/usr/bin/ld: cannot find -lz: No such file or directory"

To fix:  $ sudo apt install zlib1g-dev
REF: https://github.com/oracle/graal/issuessudo apt-get install build-essential/2727

Also did: 
$ sudo apt-get install gcc-multilib

REF: https://stackoverflow.com/questions/61725948/how-to-solve-error-message-gcc-command-not-found-only-with-arguments-on-ub


ERROR: when running "sudo apt install zlib1g-dev" on WSL/Ubuntu, Due to system clock/time not in sync with location and Windows time!
~~~~~~~~~~~~~~~~~~~
"
	E: Failed to fetch http://security.ubuntu.com/ubuntu/pool/main/g/glibc/libc-dev-bin_2.35-0ubuntu3.4_amd64.deb  404  Not Found [IP: 91.189.91.82 80]
	....
"

AND when $sudo apt update is run, the following error:
E: Release file for http://archive.ubuntu.com/ubuntu/dists/jammy-updates/InRelease is not valid yet (invalid for another 2h 54min 42s). Updates for this repository will not be applied.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

FIXED! ==> Ref ==> "WSL_Linux_Notes_Mar2024.txt" file.
https://tecadmin.net/setup-time-synchronisation-ntp-server-on-ubuntu-linuxmint/

=================================== END of Install GraalVM/JDK=========================

=========================================================================================================
NEXT ==> Installed Docker, and Microk8s on Ubuntu and deployed app. Ref: "K8S_Microk8s_Minikube_Notes_Mar2024.txt"
=========================================================================================================
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
After Microk8s installation, Application was deployed to cluster: ==>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    DEPLOYMENT Config 1 (JVM image, not -Dnative): service-type=node-port  &&  ingress.expose=true ==> With config properties in application.properties as:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        quarkus.kubernetes.namespace=vertxdev   ==> Necessary to specify the namespace. (First create one using: $ kubectl create namespace vertxdev )

        quarkus.knative.image-pull-policy=if-not-present
        quarkus.kubernetes.service-type=node-port
        quarkus.kubernetes.ingress.expose=true
        quarkus.container-image.insecure=true  ==> Necessary for registry that is not secured with a login or token.

    $ ./mvnw clean package -DskipTests -Dquarkus.container-image.push=true -Dquarkus.kubernetes.deploy=true


        After successfully deploying to Kubernetes cluster as above: Listed all currently running pods, services etc using the command:

==> After successfully deploying to Kubernetes cluster, did the following to get host:port to test the service:
    
		$ microk8s kubectl get all --all-namespaces
		
	OR

		$ microk8s kubectl get all --namespace=vertxdev

	OR if 'kubectl' is installed:

		$ kubectl get all --namespace=vertxdev


	It listed services and among that was the App/service:

	NAMESPACE            NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE
	vertxdev             service/account-vertx-service       NodePort    10.152.183.143   <none>        80:31373/TCP             17m

	From that the external port (exposed port) is 31373

	So accessed and tested successfully using  http://10.152.183.143:31373/vertx/hello?name=qqq
	AND 
	http://127.0.0.1:31373/vertx/hello?name=SSS

	AND
	http://localhost:31373/vertx/hello?name=SSS


	Also worked:  http://192.168.0.38:31373/vertx/hello?name=WWW
	Where the IP address is the wlan IP of the computer found using ifconfig

	Also worked:  http://10.1.176.40:8080/vertx/hello?name=AAA

	Where the IP address is obtained from Microk8s Dashboard at https://127.0.0.1:10443/   (run using  $ microk8s dashboard-proxy)
	Go to Services on the left side menu, THEN click on account-vertx-service  AND then look in the  "Endpoints" section to see the following:

	Host			Ports (Name, Port, Protocol)		Node					Ready
	10.1.176.40		http,8080,TCP						rajeev-latitude-e7450	true


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DEPLOYMENT Config 2 (JVM image not -Dnative): service-type=cluster-ip  &&  ingress.expose=true
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 	quarkus.kubernetes.namespace=vertxdev   ==> Necessary to specify the namespace. (First create one using: $ kubectl create namespace vertxdev )

	quarkus.knative.image-pull-policy=if-not-present
	quarkus.kubernetes.service-type=cluster-ip		==> This is the default option even if not specified.
	quarkus.kubernetes.ingress.expose=true
	quarkus.container-image.insecure=true  ==> Necessary for registry that is not secured with a login or token.

./mvnw clean package -DskipTests -Dquarkus.container-image.push=true -Dquarkus.kubernetes.deploy=true

	After successfully deploying to Kubernetes cluster as above: Listed all currently running pods, services etc using the command:

	$ microk8s kubectl get all --all-namespaces  Lists the service as follows:


	NAMESPACE            NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE
	vertxdev             service/account-vertx-service       ClusterIP   10.152.183.170   <none>        80/TCP                   6m9s


	So accessed and tested successfully using ClusterIP  http://10.152.183.170/vertx/hello?name=qqq

	Also: 
	From Dashboard at http://127.0.0.1:10443/  Go to Services on the left side menu, THEN click on account-vertx-service  AND then look in the  "Endpoints" section to see the following:


	Host				Ports (Name, Port, Protocol)		Node				Ready
	10.1.176.45			http,8080,TCP					rajeev-latitude-e7450	true

	So the URL: http://10.1.176.45:8080/vertx/hello?name=qqq   also works.


NOTE ** ==>> IMPORTANT distinction from Deployment Config 1: With quarkus.kubernetes.service-type=cluster-ip  (vs node-port) the endpoint is not exposed or available on any of the external host Ip addresses 
	like the localhost/127.0.0.1/192.168.0.38 etc on any ports.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DEPLOYMENT Config 3 (Native image with -Dnative option): service-type=cluster-ip  &&  ingress.expose=true. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NOTE: It uses: FROM registry.access.redhat.com/ubi9/ubi-minimal:9.2  in src/main/docker/Dockerfile.native

It uses the following changes in pom.xml:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	<compiler-plugin.version>3.11.0</compiler-plugin.version>
	<maven.compiler.release>21</maven.compiler.release> <<== JDK 21
	<quarkus.platform.version>3.5.0.CR1</quarkus.platform.version> <<== Latest Quarkus version as of 22-Oct-2023

Commented out Minikube and Jib as follows:
	<!--
	<dependency>
	<groupId>io.quarkus</groupId>
	<artifactId>quarkus-minikube</artifactId>
	</dependency>
	-->
	<!-- 
	<dependency>
	<groupId>io.quarkus</groupId>
	<artifactId>quarkus-container-image-jib</artifactId>
	</dependency>
	-->
Added docker as continer image builder (vs. jib):
	<dependency>
	<groupId>io.quarkus</groupId>
	<artifactId>quarkus-container-image-docker</artifactId>
	</dependency>


	Run the build & deploy using:
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	./mvnw clean package -Dnative -DskipTests -Dquarkus.container-image.push=true -Dquarkus.kubernetes.deploy=true

	URL 1:
	Everything else works and tested as before in DEPLOYMENT Config 2.
	$ microk8s kubectl get all --all-namespaces  ==> Listed the cluster IP and port to get the URL to the service.

	URL 2: Ran the Microk8s proxy, as before, to get the  "Endpoints" section, and the IP and port 8080 from there. 
	$ microk8s dashboard-proxy
	URL tested: http://10.1.176.55:8080/vertx/hello?name=sss


		~~~~~~~~~~~~~~~~~~~~~
		IMPORTANT take away 1: ONLY Deployment config 1 (with quarkus.kubernetes.service-type=node-port & quarkus.kubernetes.ingress.expose=true) gives \
		the service endpoint on localhost/127.0.0.1 and its public/wlan IP address.
		~~~~~~~~~~~~~~~~~~~~~~

		~~~~~~~~~~~~~~~~~~~~~
		IMPORTANT take away 2: If JDK 21 is used in pom.xml (with option  <maven.compiler.release>21</maven.compiler.release>) then JVM image (Non-native) depoyments \
		to Kubernetes fails. This is because all the compilation/build are done using JDK 21 and the "FROM registry.access.redhat.com/ubi8/openjdk-17:1.16" image used \ 
		in src/main/docker/Dockerfile.jvm && src/main/docker/Dockerfile.legacy.jar has older JDK 17.
		There is no image with JVM 21 available yet (as of 22-Oct-2023)
		~~~~~~~~~~~~~~~~~~~~~~

		~~~~~~~~~~~~~~~~~~~~~
		IMPORTANT take away 3: Use of JDK 21 with <maven.compiler.release>21</maven.compiler.release> works fine for native image deployments to Kubernetes/Microk8s \
		because the linux ntive image is first built using GraalVM 21 and then deployed to image: FROM registry.access.redhat.com/ubi9/ubi-minimal:9.2  \
		in src/main/docker/Dockerfile.native
		~~~~~~~~~~~~~~~~~~~~~

===========================================================================
Frequently Used Commands:
===========================================================================

./mvnw clean package -DskipTests -Dquarkus.container-image.push=true -Dquarkus.kubernetes.deploy=true

microk8s kubectl get all --namespace=vertxdev

microk8s kubectl get services --namespace=vertxdev

kubectl get services --namespace=vertxdev

kubectl get pods --namespace=vertxdev


kubectl logs -n vertxdev -f --tail=50 account-vertx-service 


Native image build/deploy to k8s:
./mvnw clean package -Dnative -DskipTests -Dquarkus.container-image.push=true -Dquarkus.kubernetes.deploy=true

WSL Open Windows Firewall:
	Step 1: From WSL/Ubuntu:
		$ ifconfig
		Output:
			eth0: 
					inet 172.25.85.52  netmask 255.255.240.0  broadcast 172.25.95.255
					inet6 fe80::215:5dff:fe53:7c27  prefixlen 64  scopeid 0x20<link>
					
	Step 2: From Ubuntu/WSL:
		$ microk8s kubectl get all -n vertxdev
	
	Output:
		vertxdev   service/account-vertx-service     NodePort    10.152.183.236   <none>       80:31145/TCP  

	Step 3: From above the exposed listen port of the Ingress is 31145.
	So, on Windows Poweshell run the Port Forwarding command "netsh interface portproxy add v4tov4 listenport=[PORT] listenaddress=0.0.0.0 connectport=[PORT] connectaddress=[WSL_IP] " as below:

	PS C:\Windows\system32> netsh interface portproxy add v4tov4 listenport=31145 listenaddress=0.0.0.0 connectport=31145 connectaddress=172.25.85.52
==> THIS is the only thing that worked!! Other steps like adding WSL Firewall rules and local ports did NOT help!.

netsh interface portproxy add v4tov4 listenport=31323 listenaddress=0.0.0.0 connectport=31323 connectaddress=172.25.85.52


___________________________________
Errors & Fixes:
===================================
0.  Setting Quarkus Debug port 
    https://stackoverflow.com/questions/55289627/quarkusio-change-default-debug-port-using-quarkusdev
    
1. When running the native exe, and trying http://localhost:8080/vertx/web API, it calls Wikipedia HTTPS url within the code.
	It then gives the error: "{"exceptionType":"io.vertx.core.VertxException","code":500,"error":"java.net.MalformedURLException: Accessing a URL protocol that was not enabled. The URL protocol https is supported but not enabled by default. It must be enabled by adding the --enable-url-protocols=https option to the native-image command."}"

Solution REF: https://quarkus.io/guides/native-and-ssl

Solution:
	To fix this add the following property to application.properties 
	quarkus.ssl.native=true     ==> and clean rebuild the native image using "mvnw clean install -Dnative"


2. Error: "[ERROR] Unknown lifecycle phase ".native.container-build=true". You must specify a valid lifecycle phase or a goal "
	When running: ./mvnw package -Pnative -Dquarkus.native.container-build=true
	from the eBook "Kubernetes-native-microservices-ebook-v4.pdf" Book page 48 (pdf page 65).


	Install Docker, Run Docker daemon, install minikube, start minikube ($ minikube start) and then run the following:
	Solution: Run the following command instead:
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	./mvnw package -Pnative --define quarkus.native.container-build=true --define quarkus.container-image.build=true

	If the above command is not run from "x64 Native Tools Command Prompt for VS 2022" OR Docker Daemon is not running: the following Error happens: 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	[ERROR] Failed to execute goal io.quarkus.platform:quarkus-maven-plugin:3.3.2:build (default) on project quarkus-kool-vertx1: Failed to build quarkus application: io.quarkus.builder.BuildException: Build failure: 
	Build failed due to errors.
	[ERROR]         [error]: Build step io.quarkus.deployment.pkg.steps.NativeImageBuildStep#resolveNativeImageBuildRunner threw an exception: java.lang.IllegalStateException: 
	No container runtime was found. Make sure you have either Docker or Podman installed in your environment.

Do the following on Ubuntu for microk8s at the same bash terminal, before running the /mvnw package --define quarkus.kubernetes.deploy=true  to deploy.
 
export KUBERNETES_MASTER=127.0.0.1:16443
export KUBERNETES_NAMESPACE=default

	==> Once the image is built successfully, run the following to Deploy to K8s:

	./mvnw package --define quarkus.kubernetes.deploy=true

	./mvnw clean package -DskipTests -Dquarkus.container-image.push=true -Dquarkus.kubernetes.deploy=true -Dquarkus.container-image.registry=registry.hub.docker.com 

Ubuntu with microk8s: API Server URL:
127.0.0.1:16443

10.152.183.1:443


./mvnw clean package -DskipTests -Dquarkus.container-image.push=true -Dquarkus.kubernetes.deploy=true


	==> Once deployed sucessfully, as above, list minikube services to locate the newly deployed container instance, its URL and port:

	$ minikube service list

	** ==>If the above did not display the service URL, then try giving the service name as below:

	$ minikube service account-vertx-service

		==> This should list the URL and port.

ALT: $ minikube service -all   ==> This lists the services and URLs. Output for the only service looks like this:
|-----------|-----------------------|-------------|---------------------------|
| NAMESPACE |         NAME          | TARGET PORT |            URL            |
|-----------|-----------------------|-------------|---------------------------|
| default   | account-vertx-service | http/80     | http://192.168.58.2:31878 |
|-----------|-----------------------|-------------|---------------------------|

3. 9/29/2023 Error: Service is not accessible using curl or browser using the URL above: http://192.168.58.2:31878/vertx/hello?name=ABC fails!
===> To troubleshoot K8S and Minikube.

NOTE 9/29/2023:
~~~~~
Try running  eval $(minikube -p minikube docker-env)  OR   $ minikube -p minikube docker-env in the command shell AFTER running $ minikube start.
Then run the $ ./mvnw package -Pnative --define quarkus.native.container-build=true --define quarkus.container-image.build=true
and THEN the $ ./mvnw package --define quarkus.kubernetes.deploy=true

Note 2: 
~~~~~~~
Find out how to access Application log within the Minikube node and K8S cluster.
Find out how to monitor the k8s cluster nodes status, and health.
Find out how to test the K8S service end points.

=============END of ERROR section ==================================================================
